{"ast":null,"code":"export default class TweetService {\n  constructor(baseURL) {\n    this.baseURL = \"http://localhost:8080\";\n  }\n  async getTweets(username) {\n    const query = username ? `?username = ${username}` : \"\";\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text,\n        username: \"kkardd\",\n        user: \"Kong\"\n      })\n    });\n    const data = await response.json();\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n}","map":{"version":3,"names":["TweetService","constructor","baseURL","getTweets","username","query","response","fetch","method","headers","data","json","status","Error","message","postTweet","text","body","JSON","stringify","user","deleteTweet","tweetId","updateTweet"],"sources":["/Users/kong/workspace/indivisual/dwitter/Client/src/service/tweet.js"],"sourcesContent":["export default class TweetService {\n    constructor(baseURL) {\n        this.baseURL = \"http://localhost:8080\";\n    }\n\n    async getTweets(username) {\n        const query = username ? `?username = ${username}` : \"\";\n        const response = await fetch(`${this.baseURL}/tweets${query}`, {\n            method: \"GET\",\n            headers: {\"Content-Type\": \"application/json\"},\n        });\n        const data = await response.json();\n        if (response.status !== 200) {\n            throw new Error(data.message);\n        }\n        return data;\n    }\n\n    async postTweet(text) {\n        const response = await fetch(`${this.baseURL}/tweets`, {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({text, username: \"kkardd\", user: \"Kong\"}),\n        });\n        const data = await response.json();\n        if (response.status !== 201) {\n            throw new Error(data.message);\n        }\n        return data;\n    }\n\n    async deleteTweet(tweetId) {\n        const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n            method: \"DELETE\",\n            headers: {\"Content-Type\": \"application/json\"},\n        });\n        if (response.status !== 204) {\n            throw new Error();\n        }\n    }\n\n    async updateTweet(tweetId, text) {\n        const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n            method: \"PUT\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({text}),\n        });\n        const data = await response.json();\n        if (response.status !== 200) {\n            throw new Error(data.message);\n        }\n        return data;\n    }\n}\n"],"mappings":"AAAA,eAAe,MAAMA,YAAY,CAAC;EAC9BC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAG,uBAAuB;EAC1C;EAEA,MAAMC,SAASA,CAACC,QAAQ,EAAE;IACtB,MAAMC,KAAK,GAAGD,QAAQ,GAAI,eAAcA,QAAS,EAAC,GAAG,EAAE;IACvD,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACL,OAAQ,UAASG,KAAM,EAAC,EAAE;MAC3DG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB;IAChD,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;IAClC,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;IACjC;IACA,OAAOJ,IAAI;EACf;EAEA,MAAMK,SAASA,CAACC,IAAI,EAAE;IAClB,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACL,OAAQ,SAAQ,EAAE;MACnDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACH,IAAI;QAAEZ,QAAQ,EAAE,QAAQ;QAAEgB,IAAI,EAAE;MAAM,CAAC;IACjE,CAAC,CAAC;IACF,MAAMV,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;IAClC,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;IACjC;IACA,OAAOJ,IAAI;EACf;EAEA,MAAMW,WAAWA,CAACC,OAAO,EAAE;IACvB,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACL,OAAQ,WAAUoB,OAAQ,EAAC,EAAE;MAC9Dd,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB;IAChD,CAAC,CAAC;IACF,IAAIH,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,EAAE;IACrB;EACJ;EAEA,MAAMU,WAAWA,CAACD,OAAO,EAAEN,IAAI,EAAE;IAC7B,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACL,OAAQ,WAAUoB,OAAQ,EAAC,EAAE;MAC9Dd,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACH;MAAI,CAAC;IAC/B,CAAC,CAAC;IACF,MAAMN,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;IAClC,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;MACzB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;IACjC;IACA,OAAOJ,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module"}